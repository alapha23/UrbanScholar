// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          String? // planner, policy_maker, or citizen
    accounts      Account[]
    sessions      Session[]
    videos        Video[]
    likes         Like[]
    comments      Comment[]
    followers     Follow[]  @relation("followings")
    followings    Follow[]  @relation("followers")
    chats         Chat[]
    profile       Profile?
    project       Project[]

    @@fulltext([name, email])
}

// Main models
// only planners can own projects
model Project {
    id      String @id @default(cuid())
    userId  String @unique
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    title   String
    description String @default("")
    allStageIds  String
    stages  Stage[]
}

// each project has multiple stages
model Stage {
    id          String @id @default(cuid())
    pos         Int @default(0)
    projectId   String
    chat        Chat?
    status      Int @default(0) // 0: not started; 1: in progress; 2 finalized
    finalizedContent    String?
    project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Profile {
    id          String  @id @unique
    userId      String  @unique
    user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    firstName   String?
    middleName  String?
    lastName    String?
    affiliation String?
    age         String?
    gender      String?
    profession  String?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Chat {
    id          String    @id @default(cuid())
    userId      String
    stageId     String    @unique
    title       String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    content     String    @db.LongText
    images      Image[]
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    stage       Stage  @relation(fields: [stageId], references: [id], onDelete: Cascade)
}

model Image {
    id          String    @id @default(cuid())
    imageURL    String    @db.Text
    imageWidth  Int?
    imageHeight Int?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    chatId      String
    chat        Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model Video {
    id          String    @id @default(cuid())
    caption     String    @db.Text
    videoURL    String    @db.Text
    coverURL    String    @db.Text
    videoWidth  Int
    videoHeight Int
    userId      String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    likes       Like[]
    comments    Comment[]

    @@fulltext([caption])
}

model Like {
    videoId String
    userId  String
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)

    @@id([videoId, userId])
}

model Comment {
    id        String   @id @default(cuid())
    videoId   String
    userId    String
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
}

model Follow {
    followerId  String
    followingId String
    follower    User   @relation("followers", fields: [followerId], references: [id], onDelete: Cascade)
    following   User   @relation("followings", fields: [followingId], references: [id], onDelete: Cascade)

    @@id([followingId, followerId])
}
